.. -*- coding: utf-8 -*-

第4章 演習課題
==============

.. note::

  以下の課題はJupyter Notebookの使用を前提としているが，もちろん他の実行環境でも同等の処理を実現出来ていれば問題ない．

.. seealso::

  .. raw:: html

    <a href="sample/chap04/kadai.html"> 解答例 </a>
    <a href="https://colab.research.google.com/github/amanotk/python-resume-sample/blob/main/chap04/kadai.ipynb" target="_blank">
    <img src="https://colab.research.google.com/assets/colab-badge.svg" style="vertical-align: text-top;">
    </a>


課題1
-----

サンプルを実行して動作を確認しよう．


課題2
-----

2つの整数 ``m`` および ``n`` を引数として受け取り，その大小を比較する関数 ``compare``

::

  def compare(m, n):
      "mとnを比較する"
      pass

を作成しよう．これを呼び出すと

::

  >>> compare(2, 1)
  2 is larger than 1
  >>> compare(1, 2)
  1 is smaller than 2
  >>> compare(3, 3)
  3 is equal to 3

などと出力するようにすること．


課題3
-----

西暦(整数)を引数として受け取り，うるう年かどうか判定する関数 ``is_leapyear``

::

  def is_leapyear(year):
      "うるう年の判定"
      pass

を作成しよう．引数がうるう年であれば真( ``True`` )，そうでなければ偽( ``False`` )を返すものとする．ただしうるう年の判定条件は以下の通りである．

  - 400で割り切れる年は無条件でうるう年である．
  - 400で割り切れずに100で割り切れる年はうるう年ではない．
  - 100で割り切れずに4で割り切れる年はうるう年である．


以下はこの関数の呼び出しの例である．

::

  >>> is_leapyear(2000)
  True


課題4
-----

整数 ``N`` を引数として受け取り， :math:`0^{\circ} \leq \theta \leq 180^{\circ}` をN分割した点(端点を含むのでN+1点)，およびそれらの点における :math:`\sin \theta` ， :math:`\cos \theta` の値を出力する関数

::

  def trigonometric(n):
      "θ, sinθ, cosθの値を出力する"
      pass

を作成せよ．これを呼び出すと例えば以下のような出力が得られるものとする．

::

  >>> trigonometric(18)
    +0.000e+00   +0.000e+00   +1.000e+00
    +1.000e+01   +1.736e-01   +9.848e-01
    +2.000e+01   +3.420e-01   +9.397e-01
    +3.000e+01   +5.000e-01   +8.660e-01
    +4.000e+01   +6.428e-01   +7.660e-01
    +5.000e+01   +7.660e-01   +6.428e-01
    +6.000e+01   +8.660e-01   +5.000e-01
    +7.000e+01   +9.397e-01   +3.420e-01
    +8.000e+01   +9.848e-01   +1.736e-01
    +9.000e+01   +1.000e+00   +6.123e-17
    +1.000e+02   +9.848e-01   -1.736e-01
    +1.100e+02   +9.397e-01   -3.420e-01
    +1.200e+02   +8.660e-01   -5.000e-01
    +1.300e+02   +7.660e-01   -6.428e-01
    +1.400e+02   +6.428e-01   -7.660e-01
    +1.500e+02   +5.000e-01   -8.660e-01
    +1.600e+02   +3.420e-01   -9.397e-01
    +1.700e+02   +1.736e-01   -9.848e-01
    +1.800e+02   +1.225e-16   -1.000e+00

ここで三角関数 ( ``math.sin`` および ``math.cos`` )の引数はラジアン単位であることに注意しよう．なお，上の例では出力のフォーマットは

::

  # xはθ，y1, y2はsinθ，cosθの値
  print('{:+12.3e} {:+12.3e} {:+12.3e}'.format(x, y1, y2))

としている．


課題5
-----

引数として与えられた2つの整数 ``m`` および ``n`` の最大公約数を求める関数 ``gcd``

::

  def gcd(m, n):
      "mとnの最大公倍数を求める"
      pass

を作成せよ．これを呼び出すと例えば以下のような出力が得られるものとする．


::

  >>> gcd(12, 20)
  4

なお，最大公約数を求めるには以下のアルゴリズム(ユークリッドの互除法)を用いるとよい．(以下では :math:`m > n` を仮定していることに注意しよう)

    #. :math:`m` を :math:`n` で割った余り :math:`r` を求める．
    #. もし :math:`r = 0` ならば :math:`n` が最大公約数である．
    #. もし :math:`r \neq 0` ならば， :math:`m` に :math:`n` を， :math:`n` に :math:`r` を代入して[1]に戻る(繰り返す)．


課題6
-----

以下の級数展開

.. math::

  e \simeq \sum_{n=0}^{N} \frac{1}{n !}. \quad (0! = 1に注意せよ)

により自然対数の底 :math:`e` の近似値を求める関数 ``approx_e``

::

  def approx_e(n, epsilon):
      "自然対数の底を級数展開を用いて求める"
      pass

を作成しよう．ただし整数 ``N`` および 実数 ``epsilon`` を引数として受け取り，関数の返値としては，収束ステータス(収束すれば ``True`` そうでなければ ``False`` )，反復回数，最終的な近似値の3つを返すこと．

ただし以下の条件を満たすこと．

  - N > 1 でない，または 0 < epsilon < 1 でない場合にはエラーメッセージを表示して，収束ステータス，反復回数，近似値の全てを ``None`` とすること．
  - 誤差がepsilon以下になった時点か， n = Nまで計算した時点で級数計算を打ち切る．

以下はこの関数を呼び出し，結果を表示する例である．

::

  >>> status, iteration, e = approx_e(10, 1.0e-8)
  >>> 
  >>> if status:
  >>>     print('Converged !')
  >>> else:
  >>>     print('Did not converge !')
  >>> 
  >>> print('{:20} : {:>20}'.format('N', iteration))
  >>> print('{:20} : {:>20.14e}'.format('Approximated', e))
  >>> print('{:20} : {:>20.14e}'.format('Exact', math.e))
  >>> print('{:20} : {:>20.14e}'.format('Error', abs(e-math.e)/math.e))
  Did not converge !
  N                    :                   10
  Approximated         : 2.71828180114638e+00
  Exact                : 2.71828182845905e+00
  Error                : 1.00477663102111e-08


課題7
-----

与えられた実数 :math:`a (> 0)` の平方根の近似値を以下のような逐次近似

.. math::

  x_{n+1} = \frac{1}{2} \left( \frac{a}{x_{n}} + x_{n} \right)

で計算して返す関数 ``approx_sqrt``

::

  def approx_sqrt(a, epsilon):
      "aの平方根の近似値を求める"
      pass

を作成しよう．ここで ``epsilon`` は許容誤差である．

なお， :math:`x_{n}` は :math:`\sqrt{a}` の :math:`n` 番目の近似値である．初期値としては :math:`x_{0} = a` を与え，:math:`\|x_{n+1} - x_{n}\| < \epsilon \|x_{n}\|` を満たすまで反復を繰り返せばよい．

以下はこの関数を呼び出し，結果を表示する例である．

::

  >>> sqrta1 = approx_sqrt(2.0, 1.0e-5)
  >>> sqrta2 = math.sqrt(2.0)
  >>> 
  >>> print('{:20} : {:>20.14e}'.format('Approximated', sqrta1))
  >>> print('{:20} : {:>20.14e}'.format('Exact', sqrta2))
  Approximated         : 1.41421356237469e+00
  Exact                : 1.41421356237310e+00
