.. -*- coding: utf-8 -*-

第3章 演習課題
==============

課題1
-----

サンプルプログラムを実行して動作を確認せよ．


課題2
-----

標準入力から2つの整数( :math:`n, m` とする)を読み込み，その大小を比較するプログラムを作成せよ．例えば :math:`n = 1, m = 2` なら以下のように ``1 is smaller than 2`` と表示する．

.. code-block:: bash

  $ python kadai2.py
  Input n : 1         # キーボード入力
  Input m : 2         # キーボード入力
  1 is smaller than 2

同様に :math:`n = 2, m = 1` なら ``2 is larger than 1``, :math:`n = m = 1` なら ``1 is equal to 1`` などと表示するものとする．

.. _label_chap03_kadai3:

課題3
-----

:math:`0^\circ` から :math:`180^\circ` まで :math:`10^\circ` 刻みの :math:`\theta` および， :math:`\sin \theta`, :math:`\cos \theta` を標準出力に表示するプログラムを作成せよ(以下のように各 :math:`\theta` の値ごとに改行せよ)．またこの結果をリダイレクトを用いてファイルとして記録し，gnuplotを用いてこのファイルのデータとgnuplotに組み込みの三角関数を共に図示せよ．なお三角関数 ( ``math.sin`` および ``math.cos`` )の引数はラジアン単位であることに注意せよ．

実行結果は例えば以下のようなものになる．

.. code-block:: bash

  $ python kadai3.py
  0.0 0.0 1.0
  10.0 0.17364817766693033 0.984807753012208
  ... 省略 ...
  170.0 0.17364817766693025 -0.9848077530122081
  180.0 1.2246467991473532e-16 -1.0


以下のようにリダイレクトでデータファイルを作成した場合には

.. code-block:: bash

   $ python kadai3.py > data.dat

gnuplotでは

.. code-block:: bash

   > plot   'data.dat' using 1:2 w lp, sin(x/180*pi)
   > replot 'data.dat' using 1:3 w lp, cos(x/180*pi)

などとして結果を確認すればよい．


.. _label_chap03_kadai4:

課題4
-----

標準入力から与えられた2つの整数\ :math:`m, n \ge 1` の最大公約数を表示するプログラムを作成せよ．最大公約数を求めるには以下のアルゴリズム(ユークリッドの互除法)を用いるとよい．

    #. :math:`m` を :math:`n` で割った余り :math:`r` を求める．
    #. もし :math:`r = 0` ならば :math:`n` が最大公約数である．
    #. もし :math:`r \neq 0` ならば， :math:`m` に :math:`n` を， :math:`n` に :math:`r` を代入して[1]に戻る(繰り返す)．

実行結果は例えば以下のようなものになる．

.. code-block:: bash

  $ python kadai4.py
  Input m: 12    # キーボード入力
  Input n: 20    # キーボード入力
  Greatest common divisor of  12 and 20  :  4


課題5
-----

以下の級数計算により自然対数の底 :math:`e` の近似値を求めるプログラムを作成せよ．

.. math::

  e \simeq \sum_{n=0}^{N} \frac{1}{n !}. \quad (0! = 1に注意せよ)

ただし以下の条件を満たすこと．

  - 上式の :math:`N` および許容誤差 :math:`\epsilon` を標準入力から読み込む．
  - :math:`N > 1` でない場合および :math:`0 < \epsilon < 1` でない場合にはエラーメッセージを表示して終了する．
  - 誤差が :math:`\epsilon` 以下になった時点か， :math:`n = N` まで計算した時点で級数計算を打ち切る．
  - 最後に収束したかどうか，最終的な項数 :math:`n` ，真値，近似値，相対誤差を表示して終了する．

実行結果は例えば以下のようなものになる．

.. code-block:: bash

  $ python kadai5.py
  Input N : 10
  Input epsilon : 1.0e-8
  Did not converge !
  N                  :  10
  Exact value        :  2.718281828459045
  Approximated value :  2.7182818011463845
  Error              :  1.0047766310211053e-08


課題6
-----

標準入力から文字列(英単語)を読み込み，それが ``food``, ``animal``, ``vehicle``,  ``others`` ，のいずれかを判定し，表示するプログラムを作成せよ．ただし ``exit`` が入力されるまでプログラムは終了せず何度でも入力を受け付けるものとする．なお以下の英単語リスト以外のものは ``others`` と判断してよい:
``apple``, ``orange``, ``banana``, ``dog``, ``cat``, ``lion``, ``car``,
``airplane``, ``motorcycle`` ．

実行結果は例えば以下のようなものになる．

.. code-block:: bash

  $ python kadai6.py
  apple                # キーボード入力
  --- apple is food
  cat                  # キーボード入力
  --- cat is animal
  car                  # キーボード入力
  --- car is vehicle
  dog                  # キーボード入力
  --- dog is animal
  bike                 # キーボード入力
  --- bike is others
  exit                 # キーボード入力
  Now exit program...


課題7
-----

以下の漸化式

.. math::

   p_{n+1} = p_n + \alpha p_n (1 - p_n)

で定義される数列 :math:`p_n (n=0, 1, \ldots)` を考える．初期値 :math:`p_0 = 0.9` から数列を生成し，そのうち :math:`n=100, \ldots, 200` までを :math:`\alpha` の関数として :math:`1 < \alpha < 3` の範囲でプロットせよ． :math:`\alpha` を :math:`10^{-3}` 刻みで変えながらプロットすると結果は以下のようになるだろう．

.. figure:: figure/logistic.png
    :align: center
    :width: 480px

    ロジスティック写像

このような写像はロジスティック写像と呼ばれ，非常に単純な式ながら一定の条件を満たすときにはカオスを生み出すことが知られている．


課題8
-----

西暦(整数)を引数として受け取り，うるう年かどうか判定する関数を実装せよ．すなわち，うるう年であれば真( ``True`` )，そうでなければ偽( ``False`` )を返すものとする．ただしうるう年の判定条件は以下の通りである．

  - 400で割り切れる年は無条件でうるう年である．
  - 400で割り切れずに100で割り切れる年はうるう年ではない．
  - 100で割り切れずに4で割り切れる年はうるう年である．

実行結果は例えば以下のようなものになる．

.. code-block:: bash

  $ python test.py
  Input year: 2000         # 2000はキーボード入力
  2000 is leap year

課題9
-----

与えられた倍精度実数 :math:`a (> 0)` の平方根の近似値を返す関数を実装せよ．ただし平方根は以下のような逐次近似で計算する
ものとする．

.. math::

  x_{n+1} = \frac{1}{2} \left( \frac{a}{x_{n}} + x_{n} \right)

ここで :math:`x_{n}` は :math:`\sqrt{a}` の :math:`n` 番目の近似値である．初期値としては :math:`x_{0} = a` を与え，反復は例えば :math:`\epsilon = 10^{-5}` に対して， :math:`\|x_{n+1} - x_{n}\| < \epsilon \|x_{n}\|` となるまで繰り返せば良い．

実装した関数と組み込み関数 ``sqrt`` の結果を比較し， :math:`\epsilon` で与えた精度の範囲内で正しいことを確認すること．

実行結果は例えば以下のようなものになる．


.. code-block:: bash

  $ python kadai9.py
  2.0                              # キーボード入力
  sqrt(x) =    1.4142135623730951
  approx  =    1.4142135623746899
