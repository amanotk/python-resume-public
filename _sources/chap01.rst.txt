.. -*- coding: utf-8 -*-

.. highlight:: python
  :linenothreshold: 1

========
はじめに
========

地球惑星物理学演習ではプログラミング言語として伝統的にFortranのみを教えてきたわけであるが，昨今の事情を考えるとこれは必ずしも時代に合っているとは言えないかもしれない．Fortranが必ずしも悪い言語というわけではないものの，科学技術計算に用いられる言語として最もポピュラーな言語の一つになったPythonを学んでおくことがプラスとなることは間違いないであろう．少なくとも筆者にとってはPythonは普段の研究で触れている時間が最も長い言語である．ここでは実験的な試みとして **Fortranをある程度使えるようになったユーザー向け** にPythonの演習用の解説および課題を用意した [#otherlang]_ ．

まずは :doc:`chap02` ではコマンドラインでのPythonスクリプトの実行方法などPythonの基礎の基礎を， :doc:`chap03` ではPythonの強みの一つである様々な対話型の実行方法を簡単に紹介する． :doc:`chap04` ではプログラミング言語としてのPythonの基礎的な文法などを解説するが，Pythonに関する書籍やウェブは既に多数存在するため，ここではあえて詳細には立ち入らないこととする． :doc:`chap05` ではlistやtupleなどのPythonの組み込みのシーケンス型と呼ばれるデータ構造について簡単に学ぶ．これらを理解した上で，:doc:`chap06` でNumPyと呼ばれるライブラリが提供する多次元配列オブジェクトの基本的な使い方を身につけよう．

.. なお，Pythonが科学技術計算（データサイエンスを含む）に使われるようになった大きな理由はおそらくNumPyと呼ばれるライブラリの存在であろう．Fortranの強力な配列演算はおそらくFortranを使う上で大きなモチベーションになっているが，NumPyの多次元配列（ここではNumPy配列と呼ぶ）はFortranの配列を使いやすくしたものと考えてよい．ある意味ではFortranユーザーにとってはPythonは比較的受け入れやすい存在かもしれない．一般にPythonのみで書かれたプログラムの実行速度はCやFortranに比べて非常に遅く，大規模データを扱う用途には使い物にならないと言ってもよい．それがNumPy配列を使うことで，はじめて実用的な速度での計算が可能になる．そこで，ここではまずは現在のデファクトスタンダードであるNumPy配列の基本的な使い方を理解することを目標とする．

参考
----

  + | Pythonプログラミング入門 #utpython
    | 東大理学部の講義．教材は最近公開されたようで， `ここ <https://sites.google.com/view/ut-python/>`_ からアクセスできる．結構詳しい．
  + | プログラミング演習 Python 2019
    | 京大の全学共通科目．PDFファイルが `ここ <https://repository.kulib.kyoto-u.ac.jp/dspace/handle/2433/245698>`_ から入手できる．初学者向けでやさしい．

-----

.. [#otherlang]

  実はプログラミング言語の基礎的な概念（条件分岐や繰り返し）が理解できるようになっていれば，新しい言語を使う上で覚えなければいけないことはそれほど多くない．したがって，必ずしもFortranでなくてもCやJavaなどの言語の基礎的な知識があれば十分だろう．実際にはPythonの言語仕様としての理解よりも，強力なライブラリ群の使い方をマスターすることの方が重要である．
