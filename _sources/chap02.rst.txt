.. -*- coding: utf-8 -*-

.. highlight:: python
  :linenothreshold: 1

.. label-basic:

============
Pythonの基本
============

まずはPythonプログラムの実行方法と基本的な言語仕様を抑えよう．ただし，ここではCまたはFortranの基本的な文法は既に知っているものとして，それらと比較をしながら基本的な事項を抑えるにとどめる．ここで解説する以上の事柄については必要に応じて調べて欲しい．


.. seealso::

  - :doc:`hello.py <chap02_hello_py>` : Hello, world !
  - :doc:`sample1.py <chap02_sample1_py>` : ソースコードの基本構造
  - :doc:`sample2.py <chap02_sample2_py>` : 変数
  - :doc:`sample3.py <chap02_sample3_py>` : 算術演算・数学関数
  - :doc:`sample4.py <chap02_sample4_py>` : キーボード入力

.. contents:: この章の内容
    :depth: 2

プログラムの実行
================

お決まりの"Hello, world !"を標準出力に表示するサンプルプログラム( :doc:`hello.py <chap02_hello_py>` )は以下の通りである．単純に ``print`` 関数に表示したい文字列を渡せばよい [#print]_．

.. literalinclude:: sample/chap02/hello.py
  :linenos:
  :caption: :doc:`hello.py <chap02_hello_py>`

これを実行するにはコマンドラインで

.. code-block:: bash

  $ python ./hello.py

または

.. code-block:: bash

  $ ./hello.py

とすればよい．2番めの実行方法は ``hello.py`` が実行権限を持っていなければならない [#cmdexec]_．
実行権限を与えるには例えば

.. code-block:: bash

  $ chmod 755 hello.py

とすればよい．

ここでCやFortranでは必須であったコンパイル作業が必要なかったことに注意しよう．Pythonはこれらのコンパイル型言語とは異なりインタープリター型の言語に分類される．すなわち，コンパイルによって全てが一旦機械語に変換されてから実行されるのではなく，プログラムの実行時に一文ずつ読み込まれて，解釈され(interpret)，実行される．したがって，一般にインタープリター型言語の実行速度はコンパイル型言語に比べて非常に遅い．Pythonにおいてもこれは正しいが，この問題は多くの場合（少なくともある程度は）回避することが可能である．その代わりに変数の型宣言などを事前にすることなく使うことができたりと，比較的お手軽に使えるのが大きな利点である．このようにソースコードを(コンパイルすることなく)そのまま実行する言語をスクリプト言語と呼んだりもする．bashなどのシェルも一種のスクリプト言語である．

また，Pythonはインタープリターとしての特徴を生かして対話的な使い方も可能である．これについては :doc:`chap03` で別途紹介するが，ここではまずはコマンドラインでの実行方法に慣れておこう [#interactive]_ ．


ソースコードの基本構造
======================

Pythonのプログラムは（変数，関数，クラスなどの定義を除けば）基本的には上から順に実行されると思ってよい．ただし各行の ``#`` 以降はコメントと解釈され無視される．また，Fortranとは異なりアルファベットの大文字と小文字は区別される．

Pythonの大きな特徴は **構文ブロックがインデント（字下げ）で区別される** という点である．まずは以下のサンプルを見てみよう．

.. literalinclude:: sample/chap02/sample1.py
  :linenos:
  :caption: :doc:`sample1.py <chap02_sample1_py>`

5-11行目が ``if-else`` による分岐である．これについては後述するが，その意味は明らかであろう．同じような分岐はCでは

.. code-block:: c

  if ( 1 ) {
    printf("Hello");
    printf("This will be printed out");
  else {
    printf("This will be ignored");
  }

Fortranでは

.. code-block:: fortran

  if ( .true. ) then
    print *, 'Hello'
    print *, 'This will be printed out'
  else
    print *, 'This will be ignored'
  end if

のように記述することになる．多くの言語では何らかのキーワードや記号(Fortranならば ``end if`` など，Cならば ``{`` および ``}``)を用いて制御構造の区切りを表しているのに対して，Pythonではインデントで区切りを付けることになっている．したがって，例えば次のような書き方はエラーとなる．

::

  if 1:
      print('Hello')
    print('error !')  # インデントがあっていない
  print('error !')    # 次に続くelseと整合しない
  else:
      print('This will be ignored')

すなわち， **文頭に余計なスペースなどがあるソースコードは文法的に許されない** のである．多くの言語ではあくまで人間の見やすさのためにインデントをしているのであって，文法的には必須ではない．したがって，書き手に依存して簡単に読みにくいコードが出来てしまう．Pythonではインデントを文法として強制することで，誰が書いても読みやすいコードになるのである [#readability]_．

なお，このようなインデントを手動で行なうのはあまり賢いやり方ではないので，エディタの機能をうまく使うとよい．最近の高機能なエディタであればどれでもPythonを扱うための便利な機能を提供している．

また，Pythonには標準で様々なモジュール（ライブラリ）が用意されており，それらを組み合わせてプログラムを開発していくことになる．モジュールの使い方についての詳細な説明はここでは割愛するが，モジュールを使うにはまず ``import`` する必要がある．これはFortranの ``use`` と同じものだと考えて良い．Cでは ``include`` に近い．

上の例では17行目でsysという名前のモジュールを ``import`` し，20行目，22行目で ``sys.exit`` を呼んでいる．Pythonのプログラムは基本的には上から順に実行され最後の行に達した段階で終了するが，何らかのエラーが発生した場合など，途中でプログラムの実行を打ち切りたい場合には ``sys.exit`` を呼べばよい．(Fortranの ``stop`` ，Cの ``exit`` 関数と同じものである．）


変数
====

スクリプト言語であるPythonにおける変数の扱いはコンパイル型言語とは大きく異なり，変数を使う際に型宣言をする必要がない．例えば以下のように変数を使うことができる．

.. literalinclude:: sample/chap02/sample2.py
  :lines: 4-8
  :lineno-match:
  :caption: :doc:`sample2.py <chap02_sample2_py>` 抜粋

ここで変数 ``n`` や ``x`` の型を指定していないことに注意しよう．Pythonでは明示的にデータ型を指定しなくても， ``=`` で数値を代入する際に（実行時に）右辺値に応じて自動的に変数の型が選択されることになっている．したがって ``n`` は整数， ``x`` は実数となる．なお，Python3では実数型（浮動小数点数）はデフォルトで8byte(Cの ``double`` ，Fortranの ``double precision`` または ``real(8)``)となる．一方で，整数型には決まったサイズは存在しない（値が大きくなると，必要に応じてサイズが大きくなる）．

CやFortranではプログラムや関数・サブルーチンの先頭で変数を宣言してから使う必要があったのに対して，いつでも好きなときに変数を定義して使うことができるので大変便利である．しかし，まだ定義していない変数を参照するとエラーが発生する．例えば先ほどの例の後に

::

   print('y = ', y)

としても，変数 ``y`` が定義されていないので実行時にエラーが発生する．例えば ``sample2.py`` の10行目のコメントアウトを外して実行すると，

::

  Traceback (most recent call last):
    File "sample/chap02/sample2.py", line 10, in <module>
      print('y = ', y)
  NameError: name 'y' is not defined

のように表示されてしまう．これは意外とよくある間違いなので気をつけよう．

なお，Pythonではプログラム中で書き換えのできない定数(Cの ``const``, Fortranの ``parameter``)は言語仕様としては提供されていない．必要な場合には実質的には定数と振る舞うような変数を用いることは可能である．


算術演算
========

数学的な演算はCやFortranと共通の点が多いが，多少注意が必要である．以下に算術演算演算の使用例を示す．

.. literalinclude:: sample/chap02/sample3.py
  :lines: 5-11
  :lineno-match:
  :caption: :doc:`sample3.py <chap02_sample3_py>` 抜粋

CやFortranでは整数同士で割り算( ``/`` 演算子)をすると返値も整数となるため，上の例で言えば ``12 / 5`` は ``2`` となるが，Pythonでは自動的に実数同士の割り算に変換される．代わりに ``//`` を整数同士の割り算をする演算子として用いる．

また ``%`` 演算子はCと同様に整数同士の割り算の余りを返す．Fortranでは ``mod`` 関数に相当する．逆に ``**`` 演算子はFortranと同じべき乗を返すが，Cでは ``pow`` 関数に相当する．

数学関数
========

数学関数を使うには ``math`` というモジュールを ``import`` すればよい．

::

  import math

その上で，例えば :math:`\exp(x)` を計算するには

::

  math.exp(0.5)

のように関数 ``math.exp`` を用いればよい．それ以外にもCやFortranに組み込みで用意されているような数学関数はPythonにも用意されていると考えてよいだろう．

.. note::

    ここではPython本体に組み込みのモジュールという意味で ``math`` を紹介した．しかし，科学技術計算でPythonを使う場合にはほぼ間違いなく ``numpy`` と呼ばれるライブラリがインストールされている環境を使うことになるので，その場合には ``numpy`` に含まれている数学関数を用いる方が何かと便利である．使い方は全く同じである．


キーボード入力
==============

ここでコマンドラインでPythonプログラムを実行する際にキーボードからの入力を受け取る方法を一つ紹介しておこう．これには組み込み関数の ``input`` を使う．

.. literalinclude:: sample/chap02/sample4.py
  :lines: 4-6
  :lineno-match:
  :caption: :doc:`sample4.py <chap02_sample4_py>` 抜粋

``input`` によってキーボード入力は文字列として読み込まれるので，整数や実数として用いたい場合には文字列から型を変換する関数 ``int`` もしくは ``float`` を用いる必要がある．変換された後は以下の例のように通常の整数，実数の変数として扱えば良い．

.. literalinclude:: sample/chap02/sample4.py
  :lines: 8-15
  :lineno-match:
  :caption: :doc:`sample4.py <chap02_sample4_py>` 抜粋

プログラムに入力を与える方法は他にも色々と考えられるが，まずはこの一番簡単な方法を使うことにしよう．

..
.. 課題
..

.. include:: kadai/chap02_kadai.rst

-----

.. [#print]

    Python-2.xでは ``print`` の形式が違っていたので古い情報を参照する場合には注意が必要．他にも細かいところに少しずつ違いがある．なお，以下のように ``print`` 関数にはカンマ区切りで複数の文字列や変数を渡すことができる．

    ::

       print('Hi, ', 'I ', 'Love ', 'Python !')


.. [#cmdexec]

    実は :doc:`hello.py <chap02_hello_py>` の1行目がPythonで実行せよという意味なので，実行権限さえ与えてあればこのように実行することができるのである．

.. [#interactive]

   最近ではPythonに関する情報の多くがJupyter Notebookと呼ばれる環境での実行を前提としており，Pythonスクリプトとしての実行方法についてあまり紹介してくれていない．実際にそのような使い方を知らない人も多いようなので，ここではあえてコマンドラインでの実行方法から先に紹介する．

.. [#readability]

   もちろんこれは程度の問題である．Pythonであっても読みにくいコードが絶対にできないわけではない．
