.. -*- coding: utf-8 -*-

.. highlight:: python
  :linenothreshold: 1

================
便利な組み込み型
================

Pythonの強みは言語そのものよりも，その強力なライブラリ群にあると言える．ここではPython本体に組み込まれているオブジェクト(データ型)の中でも最も頻繁にお目にかかるであろうもののうちいくつかを簡単に紹介する．ここで紹介するのはあくまで基本中の基本なので，本格的に使うにはこれだけでは少々心もとないが，これをマスターしておけばあとは各自で調べることができるであろう．

.. seealso::

  .. raw:: html

    <a href="sample/chap05/sample.html"> サンプルコード </a>
    <a href="https://colab.research.google.com/github/amanotk/python-resume-sample/blob/main/chap05/sample.ipynb" target="_blank">
    <img src="https://colab.research.google.com/assets/colab-badge.svg" style="vertical-align: text-top;">
    </a>

.. contents:: この章の内容
    :depth: 2

.. _label_chap05_tuple:

tuple
=====
tupleと呼ばれるオブジェクトは配列のように複数の値をひとまとめにしたものである．後述のlistと同様に，とりあえずはCやFortranの配列と同じようなものとして考えてもらって構わない．

tupleは複数の値を ``()`` と ``,`` (カンマ)で以下のように表される

::

  >>> (1, 2, 3)
  (1, 2, 3)

これは3つの整数要素から成るtupleを表す．

配列とは異なり，tupleの要素として任意のPythonオブジェクトを格納できる．また ``()`` は空の(要素が何もない)tupleを表す．なお，tupleの各要素は ``[]`` で参照することができる．これらを以下の例で確かめてみよう．

::

  >>> ()                           # 空のtuple
  ()
  >>> a = ('this', 'is', 'tuple')  # tupleオブジェクトを変数aに格納
  >>> (1, 'string', a)             # 異なる型のオブジェクトも格納できる
  (1, 'string', ('this', 'is', 'tuple'))
  >>> a[0]                         # aの最初の要素を参照
  'this'


tupleの大きな特徴は **要素の値を変更することができない** という点である．要素の値を書き換えようとすると以下のようなエラーとなる．

::

  >>> a[0] = 'that'
  ---------------------------------------------------------------------------
  TypeError                                 Traceback (most recent call last)
  <ipython-input-28-900cc7775085> in <module>
  ----> 1 a[0] = 'that'
  
  TypeError: 'tuple' object does not support item assignment


tupleは複数の値を一時的にまとめて扱いたいときによく使われるものなので，その要素を書き換えることは想定されていないのである．典型的な使い方の一つとして，関数から複数の値を返したいときなどに使われる．例えば以下の ``test_tuple`` は与えられた2つの引数の和と差を返す関数である．

::

  >>> def test_tuple(a, b):
  ...     return a+b, a-b
  ...
  >>> test_tuple(1, 2)
  (3, -1)
  >>> c, d = test_tuple(20, 10)
  >>> c
  30
  >>> d
  10


この例のように，実はtupleを作成するときの ``()`` は省略することができる． ここでは ``return a+b, a-b`` でサイズ2のtuple ``(a+b, a-b)`` を関数の返値としている．また，関数の返値としてtupleが返されるときは，その要素をそれぞれ別の変数に代入して使うことができる(この例では ``c``, ``d``)．なお，これらの変数はtupleではないので，当然変更も可能である．


.. _label_chap05_list:

list
====

基本的にはlistは要素の書き換えができるtupleと考えてよい．tupleの例をそのままlistに置き換えてみよう．

::

  >>> []
  []
  >>> a = ['this', 'is', 'list']
  >>> [1, 'string', a]
  [1, 'string', ['this', 'is', 'list']]
  >>> a[0]
  'this'
  >>> a[0] = 'that' # 自由に要素の書き換えができる
  >>> a
  ['that', 'is', 'list']


listはCやFortranの配列と異なり各種メソッドを呼び出すことで値の挿入，追加，削除などが自在にできる．使い方は以下の例を見れば明らかだろう．

::

  >>> a = [1, 2, 3]             # 初期化
  >>> a.append(4)               # 最後に新しい要素を追加
  >>> a
  [1, 2, 3, 4]
  >>> a.insert(1, 100)          # 1番目に要素100を追加
  >>> a
  [1, 100, 2, 3, 4]
  >>> a.remove(100)             # 要素100を削除(複数ある場合は最初に見つかった要素)
  >>> a
  [1, 2, 3, 4]
  >>> a.pop()                   # 最後の要素削除
  4
  >>> a
  [1, 2, 3]
  >>> a.extend([10, 11, 12])    # 引数に受け取ったリストの各要素を追加
  >>> a
  [1, 2, 3, 10, 11, 12]
  >>> a.clear()                 # 空にする
  >>> a
  []


注意すべきはlistのサイズを伸ばす ``append()``, ``extend()`` を多用すると一般的には遅くなる可能性が高いということである．基本的には大規模なデータの格納にはlistは使わない [#usenumpy]_ ，また何らかの理由で使わざるを得ないときにはサイズが予め分かっているのであれば最初にそのサイズのlistを作っておく(サイズを変更しない)，という方針にすべきである．

また，以下のようにtupleをlistに変換することもできる．

::

  >>> list((3, 4, 5)) # tuple (3, 4, 5) をlistに変換
  [3, 4, 5]


なお，任意のサイズの初期化されたlistは簡単に作ることができる．例えば以下の例は0で初期化されたサイズ10のlistを作る例である．ループで ``append()`` を繰り返して作るという無駄なことは絶対にやめよう．

::

  >>> [0]*10
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]



listを生成するときに「内包表記」を使うと便利なことも多い．例えば以下のように用いる．ただし，慣れるまでは難しいかもしれないので無理して使う必要はない．

::

  >>> [i**2 for i in range(5)]
  [0, 1, 4, 9, 16]


.. _label_chap05_range:

range
=====
これまでも ``for`` ループで繰り返し回数を指定するときに ``for i in range(10)`` のような書き方をしてきた．rangeは整数列を表すという点を除けば，listやtupleと同じように値の列を表すオブジェクトである．(従ってtuple, list, rangeを総称してシーケンス型と呼ぶ．)

rangeは規則的な数列を表すオブジェクトであるため実際にはメモリ上に値を保持せず，必要に応じて値を計算する．すなわち，tupleやlistと異なり，常に使用するメモリは一定であるという特徴がある．(したがって ``for`` ループなどでの使用に向いている．)

必要であれば，以下のようにlistやtupleに簡単に変換することが可能である．

::

  >>> list(range(5))
  [0, 1, 2, 3, 4]
  >>> tuple(range(5))
  (0, 1, 2, 3, 4)


.. _label_chap05_dict:

dict
====
dictは辞書(dictionary)や連想配列(ハッシュ)などと呼ばれるオブジェクトである．複数の値を保持するという意味ではlistなどのオブジェクトと同様である．大きな違いは，listを始めとするシーケンス型は要素が順番を持ち，整数添字で各要素を指定するのに対して，dictの要素は順番を持たない．その変わりに文字列の「キー」と対応する「値」のペアで要素を記憶するのがdictオブジェクトである．dictは多くの値を保持しなければいけないときにも配列やリストのように「順番」を気にせず使うことができるので大変便利である．

以下で簡単な使い方を見てみよう．まずはキーと値のペアからdictオブジェクトを作成する．

::

  >>> a = {'key1' : 'value1', 'key2' : 'value2', 'key3' : 'value3'}
  >>> a
  {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}
  >>> b = dict(key1='value1', key2='value2', key3='value3')
  >>> b
  {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}

この例ではどちらとも中身は同じもので， ``key1`` ， ``key2`` ， ``key3`` がキー， ``value1`` ， ``value2`` ， ``value3`` がそれぞれのキーに対応する値である．なお，値を一意に指定するためにdictのキーはユニークである必要がある．そのためキーの重複は許されず，仮に重複があった場合には一番最後に指定された値で上書きされることになるので注意しよう．

具体的に要素にアクセスしたり，追加，削除は以下のように行えばよい．

::

  >>> a['key3']            # キーを指定して値にアクセス
  'value3'
  >>> a['key1'] = 'hoge'   # キーを指定して値を更新
  >>> a
  {'key1': 'hoge', 'key2': 'value2', 'key3': 'value3'}
  >>> a['key0'] = 'value0' # 新たなキーを指定して値を追加
  >>> a
  {'key1': 'hoge', 'key2': 'value2', 'key3': 'value3', 'key0': 'value0'}
  >>> del a['key1']        # 削除
  >>> a
  {'key2': 'value2', 'key3': 'value3', 'key0': 'value0'}


なお，存在しないキーを指定して値にアクセスするとエラーとなる．

::

  >>> a['key1']
  ---------------------------------------------------------------------------
  KeyError                                  Traceback (most recent call last)
  <ipython-input-26-fbbb4b4f3c5e> in <module>
  ----> 1 a['key1']
  
  KeyError: 'key1'


実際にはエラーとならないように処理が必要である．キーが存在するかどうかは ``in`` 演算子でチェックすることができるし，キーが存在しない要素にアクセスした時に「デフォルト値」を返すような処理も有効である．以下で例を見てみよう．

::

  >>> 'key1' in a
  False
  >>> 'key2' in a
  True
  >>> a.get('key1', 'hoge')
  'hoge'
  >>> a.get('key2', 'hoge')
  'value2'

1行目と3行目はそれぞれキーがあるかどうかをチェックしている．5行目および7行目は ``get()`` メソッドを使ってキーに対応する値にアクセスしているが， このとき2番目の引数にデフォルト値を指定することができる(指定しない場合は ``None``)． ``get()`` でアクセスした場合には ``[]`` とは異なり，キーが見つからなかったときにエラーを出さずに，デフォルト値を返す．これによりエラーチェック処理を省いたり簡単にすることができる．

dict全体を順番に操作する処理には ``keys()`` ， ``values()`` ， ``items()`` といったメソッドを用いることになる．それぞれキー，値，キーと値のペアの「メモリビュー」オブジェクトを返す．

::

  >>> a.keys()
  dict_keys(['key2', 'key3', 'key0'])
  >>> a.values()
  dict_values(['value2', 'value3', 'value0'])
  >>> a.items()
  dict_items([('key2', 'value2'), ('key3', 'value3'), ('key0', 'value0')])

ここでは「メモリビュー」が何かといった細かいことは置いておいて，具体的な使い方の例を見てみよう．これらは以下のようにループで用いることになるだろう．

::

  # 全てのキーと値のペアを出力
  >>> for key, val in a.items():
  ...    print("key = {:5s} : value = {:5s}".format(key, val))
  key = key2  : value = value2
  key = key3  : value = value3
  key = key0  : value = value0
  # 全てのキーを出力
  >>> for key in a.keys():
  ...    print(key)
  key2
  key3
  key0

例えばキーをソートしたいことがあるかもしれない．dict_keysオブジェクトは直接ソートすることができないが，以下のようにlistに一度変換してしまえば簡単にソートができる．

::

  >>> keys = list(a.keys())  # dict_keysをlistに変換
  >>> keys
  ['key2', 'key3', 'key0']
  >>> keys.sort()            # listオブジェクトなのでソートできる
  >>> keys
  ['key0', 'key2', 'key3']
  >>> for key in keys:
  ...    print("key = {:5s} : value = {:5s}".format(key, a[key]))
  key = key0  : value = value0
  key = key2  : value = value2
  key = key3  : value = value3

..
.. 課題
..

.. include:: kadai/chap05_kadai.rst

-----

.. [#usenumpy]

  ほとんどの場合はNumPy配列を使えば十分なハズである． :doc:`chap06` 参照．
